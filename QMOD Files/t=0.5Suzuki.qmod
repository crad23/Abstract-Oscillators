qfunc init_phase(state: qnum) {
  state_in_qubit: qbit[];
  msb: qbit[];
  allocate<3.0>(msb);
  state -> state_in_qubit;
  repeat (i: state_in_qubit.len) {
    CX(state_in_qubit[i], msb[i]);
  }
  control (msb[2.0]) {
    PHASE<1.5707963267948966>(state_in_qubit[2.0]);
  }
  state_in_qubit -> state;
}

qfunc main(output state: qnum) {
  prepare_amplitudes<[
    0j,
    0j,
    0j,
    0j,
    (-0j),
    ((-1) + 0j),
    (-0j),
    (-0j)
  ], 1e-12>(state);
  init_phase(state);
  suzuki_trotter<[
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::I,
        Pauli::I
      ],
      coefficient=0.25
    },
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::I,
        Pauli::Z
      ],
      coefficient=-0.25
    },
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::I,
        Pauli::X
      ],
      coefficient=-0.25
    },
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::Z,
        Pauli::I
      ],
      coefficient=0.25
    },
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::Z,
        Pauli::Z
      ],
      coefficient=-0.25
    },
    PauliTerm {
      pauli=[
        Pauli::X,
        Pauli::Z,
        Pauli::X
      ],
      coefficient=-0.25
    },
    PauliTerm {
      pauli=[
        Pauli::Y,
        Pauli::I,
        Pauli::Y
      ],
      coefficient=0.25
    },
    PauliTerm {
      pauli=[
        Pauli::Y,
        Pauli::Z,
        Pauli::Y
      ],
      coefficient=0.25
    }
  ], 0.5, 2, 20>(state);
}

